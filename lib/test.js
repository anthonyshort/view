// Generated by CoffeeScript 1.3.3
(function() {

  describe('View', function() {
    var View, assert;
    View = require('view');
    assert = require('component-assert');
    beforeEach(function() {
      return this.view = new View;
    });
    afterEach(function() {
      return this.view.destroy();
    });
    it('should work', function() {
      return assert(true, 'it works');
    });
    it('should be subclassed', function() {
      var Subview, view;
      Subview = View.create({
        foo: 'bar'
      });
      view = new Subview;
      assert(view.foo === 'bar');
      return assert(Subview.create === View.create);
    });
    it('should have an element by default', function() {
      return assert(this.view.el.toString() === '[object HTMLDivElement]');
    });
    it('should accept an element in the options', function() {
      var el, view;
      el = document.createElement('div');
      view = new View({
        el: el
      });
      return assert(view.el === el);
    });
    it('should call initialize', function() {
      var Subview, view;
      Subview = View.create({
        initialize: function() {
          return this.matched = true;
        }
      });
      view = new Subview;
      return assert(view.matched === true);
    });
    it('should set the options', function() {
      var options, view;
      options = {
        foo: 'bar'
      };
      view = new View(options);
      return assert(view.options === options);
    });
    it('should include an object', function() {
      var Subview, view;
      Subview = View.create();
      Subview.include({
        foo: 'bar'
      });
      view = new Subview;
      return assert(view.foo === 'bar');
    });
    it('should bind methods to the element', function() {
      var clicked;
      clicked = false;
      this.view.bind('click', function() {
        return clicked = true;
      });
      this.view.el.click();
      return assert(clicked === true);
    });
    it('should append elements to the view', function() {
      var foo, found;
      foo = document.createElement('div');
      foo.className = 'foo';
      this.view.append(foo);
      found = this.view.find('.foo');
      return assert(found === foo);
    });
    it('should unbind events from the element', function() {
      var count;
      document.body.appendChild(this.view.el);
      count = 0;
      this.view.bind('click', function() {
        return count += 1;
      });
      this.view.el.click();
      this.view.unbind('click');
      this.view.el.click();
      return assert(count === 1);
    });
    it('should unbind all events from the element', function() {
      var count;
      document.body.appendChild(this.view.el);
      count = 0;
      this.view.bind('click', function() {
        return count += 1;
      });
      this.view.el.click();
      this.view.unbind();
      this.view.el.click();
      return assert(count === 1);
    });
    it('should find elements within', function() {
      var foo, found;
      foo = document.createElement('div');
      foo.className = 'foo';
      this.view.el.appendChild(foo);
      found = this.view.find('.foo');
      return assert(found === foo);
    });
    it('should add subviews', function() {
      var view;
      view = new View;
      this.view.addSubview(view);
      return assert(this.view.subviews.length === 1);
    });
    it('should remove subviews', function() {
      var view;
      view = new View;
      this.view.addSubview(view);
      this.view.removeSubview(view);
      return assert(this.view.subviews.length === 0);
    });
    it('should not remove views that arent subviews', function() {
      var destroyed, view;
      view = new View;
      destroyed = false;
      view.destroy = function() {
        return destroyed = true;
      };
      this.view.removeSubview(view);
      return assert(destroyed === false);
    });
    it('should remove the view', function() {
      var matching;
      this.view.el.className = 'foo';
      document.body.appendChild(this.view.el);
      this.view.remove();
      matching = document.querySelector('.foo');
      return assert(matching === null);
    });
    it('should bind methods on events to the view', function() {
      this.view.bind('click', function() {
        return this.clicked = true;
      });
      this.view.el.click();
      return assert(this.view.clicked === true);
    });
    it('should reset the view and clear all events', function() {
      this.view.clicked = false;
      this.view.bind('click', function() {
        return this.clicked = true;
      });
      this.view.reset();
      this.view.el.click();
      return assert(this.view.clicked === false);
    });
    it('should reset the view and change elements', function() {
      var el;
      el = this.view.el;
      this.view.reset();
      return assert(this.view.el !== el);
    });
    it('should bind all events at once', function() {
      this.view._onClick = function() {
        return this.clicked = true;
      };
      this.view.bind({
        'click': '_onClick'
      });
      this.view.el.click();
      return assert(this.view.clicked === true);
    });
    it('should delegate all events on load', function() {
      var Subview, view;
      Subview = View.create({
        events: {
          'click': function() {
            return this.clicked = true;
          }
        }
      });
      view = new Subview;
      view.el.click();
      return assert(view.clicked === true);
    });
    return it('should bind events by method name', function() {
      this.view.doSomething = function() {
        return this.done = true;
      };
      this.view.bind('click', 'doSomething');
      this.view.el.click();
      return assert(this.view.done === true);
    });
  });

}).call(this);
